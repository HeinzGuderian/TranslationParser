(ql:quickload "cl-utilities")
(in-package :csharp-parser)

(defun variable? (tokenizer)
  (with-peek
    (or (match-assign peek) 
	(match-end peek))))

(defun make-variable (tokenizer node-stack enclosing-node-name)
  (if (not (variable? tokenizer))
      (print "error parsing variable"))
  (destructuring-bind (visibility-node type-node) (read-vis-type node-stack) 
    (let* ((name (current-token tokenizer))
	   (peek (peek-token tokenizer))
	   (variable-node (make-ast-node enclosing-node-name ())))
      (push-node visibility-node variable-node)
      (push-node (make-ast-node "variable-name" name) variable-node)
      (push-node type-node variable-node)
      (let ((value (if (match-assign peek)
		       (progn
			 (advanze-token tokenizer)
			 (advanze-token tokenizer)
			 (let ((value-node (make-ast-node "variable-value" ())))
			   (expression tokenizer value-node)
			   value-node))
		       (make-ast-node "variable-value" ()))))
	(push-node value variable-node))
      variable-node)))
